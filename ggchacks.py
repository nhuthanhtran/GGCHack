# -*- coding: utf-8 -*-
"""GGCHacks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QDTuVmjD-TlRjOWg47XSrdg69LNJDZj6

Install dependency
"""



"""Add necessary library and download resources

"""

import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from nltk.corpus import wordnet
import requests
import re


nltk.download('vader_lexicon')
nltk.download('wordnet')

sia = SentimentIntensityAnalyzer()

"""Fetch current weather data from Weather.gov based on latitude and longitude."""

def get_weather(latitude, longitude):
    url = f"https://api.weather.gov/points/{latitude},{longitude}"

    # Set a User-Agent header as required by the Weather.gov API
    headers = {
        "User-Agent": "HackathonProject (ntran30@ggc.edu)"
    }

    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        return None, None, None

    # Extract the forecast URL from the response
    forecast_url = response.json().get("properties", {}).get("forecast")
    if not forecast_url:
        return None, None, None

    # Get the forecast data
    forecast_response = requests.get(forecast_url, headers=headers)
    if forecast_response.status_code != 200:
        return None, None, None

    forecast_data = forecast_response.json().get("properties", {}).get("periods", [])
    if not forecast_data:
        return None, None, None

    current_forecast = forecast_data[0]
    temperature = current_forecast.get("temperature")
    temperature_unit = current_forecast.get("temperatureUnit")
    short_forecast = current_forecast.get("shortForecast")

    return short_forecast, short_forecast, f"{temperature}°{temperature_unit}"

def suggest_outfit(weather_condition, temperature):
    try:
        temperature = int(temperature)
    except ValueError:
        return "I'm sorry, I couldn't understand the temperature information."

    outfit = "Based on the weather, here’s what you should wear: "

    if temperature <= 10:
        outfit += "Wear a warm coat, scarf, gloves, and insulated boots. "
        if "snow" in weather_condition.lower():
            outfit += "Since it's snowy, consider waterproof boots and a thick hat. "
        elif "rain" in weather_condition.lower():
            outfit += "It's also rainy, so bring a raincoat or waterproof jacket. "

    elif 10 < temperature <= 20:
        outfit += "A light jacket or sweater should be enough. "
        if "rain" in weather_condition.lower():
            outfit += "Bring an umbrella or a raincoat, as it’s rainy. "

    elif 20 < temperature <= 30:
        outfit += "It's warm, so wear a t-shirt and shorts or light pants. "
        if "rain" in weather_condition.lower():
            outfit += "However, it may rain, so carry a light rain jacket or umbrella. "

    else:
        outfit += "It’s hot! Wear light, breathable fabrics like a tank top, shorts, and sunglasses. "
        if "clear" in weather_condition.lower():
            outfit += "Consider wearing a hat and applying sunscreen to protect from the sun. "

    return outfit

"""Get the latitude and longitude for a given location name using Open Cage API."""

import requests

OPENCAGE_API_KEY = '5b83a9911b8f4ee6a4fc1398709af7f7'

def get_coordinates(location_name):
    url = f"https://api.opencagedata.com/geocode/v1/json"
    params = {
        "q": location_name,
        "key": OPENCAGE_API_KEY,
        "limit": 1
    }

    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data['results']:
            latitude = data['results'][0]['geometry']['lat']
            longitude = data['results'][0]['geometry']['lng']
            return latitude, longitude
        else:
            print("No results found.")
            return None, None
    else:
        print(f"Error: {response.status_code}")
        return None, None

"""Provide a random suggestion for a movie or a book when the user requests entertainment."""

import random

def entertainment_suggestion():
    movies = [
        "Inception", "The Shawshank Redemption", "The Matrix", "The Godfather",
        "Interstellar", "Parasite", "The Dark Knight", "Forrest Gump",
        "Pulp Fiction", "The Lord of the Rings"
    ]

    books = [
        "To Kill a Mockingbird by Harper Lee", "1984 by George Orwell",
        "Pride and Prejudice by Jane Austen", "The Catcher in the Rye by J.D. Salinger",
        "The Great Gatsby by F. Scott Fitzgerald", "Moby-Dick by Herman Melville",
        "Brave New World by Aldous Huxley", "Harry Potter by J.K. Rowling",
        "The Hobbit by J.R.R. Tolkien", "War and Peace by Leo Tolstoy"
    ]

    if random.choice(["movie", "book"]) == "movie":
        suggestion = random.choice(movies)
        return f"How about watching a movie? I suggest: '{suggestion}'."
    else:
        suggestion = random.choice(books)
        return f"How about reading a book? I suggest: '{suggestion}'."

"""general responses"""

responses = {
    "hello": "Hi there! How can I help you?",
    "hi": "Hello! What can I do for you today?",
    "how are you": "I'm just a bot, but thanks for asking! How can I assist you?",
    "what's your name": "I'm ChatBot for GGCHack, your friendly assistant."
}

def get_synonyms(word):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name().lower())
    return synonyms

def find_matching_response(user_input):
    user_input = user_input.lower()

    for keyword, response in responses.items():
        keyword_synonyms = get_synonyms(keyword)
        keyword_synonyms.add(keyword)
        if any(synonym in user_input for synonym in keyword_synonyms):
            return response

    return None

"""generate the chat response"""

def get_response(user_input):

    response_output = ""
    user_input = user_input.lower()

    # Check for matching basic responses
    for keyword, response in responses.items():
        if keyword in user_input:
            response_output += response
    # Handle entertainment suggestions
    if any(keyword in user_input for keyword in ["entertainment", "fun", "things to do", "activities"]):
        response_output += "Let"
        response_output += entertainment_suggestion()

    # Check if the user is asking about the weather
    if "weather" in user_input:
        location_match = re.search(r"weather in (.*)", user_input)
        if location_match:
            location_name = location_match.group(1)
            latitude, longitude = get_coordinates(location_name)
            if latitude and longitude:
                main, description, temp = get_weather(latitude, longitude)
                if main:
                    weather_response = f"The current weather in {location_name} is {description.lower()} with a temperature of {temp}."
                    #weather_response += suggest_outfit(main, temp)
                    if "rain" in main.lower():
                        weather_response += " Don't forget your umbrella!"
                    elif "clear" in main.lower():
                        weather_response += " It’s a beautiful day for outdoor activities!"
                    response_output += weather_response
                else:
                    response_output += "Sorry, I couldn't fetch the weather right now. Please try again later."
            else:
                response_output += "Sorry, I couldn't find the location. Could you specify it more clearly?"
        else:
            response_output += "Please specify the location for the weather."

    # Sentiment-based encouragement messages
    sentiment_score = sia.polarity_scores(user_input)["compound"]
    if sentiment_score <= -0.75:
        response_output += "I'm really sorry you're feeling this way. Remember, tough times don’t last forever. Take things one step at a time, and don’t hesitate to reach out to someone you trust."
    elif -0.75 < sentiment_score <= -0.5:
        response_output += "I can tell you're going through something challenging. It’s okay to feel down sometimes. Take a deep breath, and remember, you're not alone."
    elif -0.5 < sentiment_score <= -0.25:
        response_output += "It sounds like you're feeling a bit off. Try to take a moment for yourself or do something you enjoy—it might help lift your mood."

    # Final response if no specific match found
    if response_output:
        return response_output
    else:
        return "I'm sorry, I didn't quite understand that. Could you rephrase?"

"""main

"""

print("Chatbot is ready! Type 'quit' to stop the conversation.\n")

while True:
    user_input = input("You: ")
    if (user_input.lower() == "quit") or (user_input.lower() == "bye"):
        print("Chatbot: Goodbye! Have a")
        break
    response = get_response(user_input)
    print("Chatbot:", response)

from flask import Flask, request, jsonify
app = Flask(__name__)
@app.route('/chatbot', methods=['POST'])
def chatbot():
    user_input = request.json.get('message')
    if not user_input:
        return jsonify({"error": "No message received"}), 400

    response = get_response(user_input)
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run()